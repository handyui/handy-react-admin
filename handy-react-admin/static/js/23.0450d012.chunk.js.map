{"version":3,"sources":["components/table/BasicTable.tsx","components/table/index.ts","../node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js","../node_modules/@ant-design/icons/es/icons/DeleteOutlined.js","pages/system/account/index.tsx"],"names":["BasicTable","forwardRef","props","ref","columns","rowKey","rowSelection","queryParams","pageOption","searchParam","getListFunc","type","onExpand","callback","useState","data","setData","loading","setLoading","flag","find","item","dataIndex","key","actions","_isCancelled","React","useRef","refreshTableData","param","params","current","size","pageSize","then","result","code","records","total","forEach","finally","actionEvent","record","func","useEffect","useImperativeHandle","refreshTable","val","column","arr","push","filter","length","title","render","text","map","action","index","onConfirm","onClick","genColumn","dataSource","pagination","onChange","page","pageSizeOptions","showSizeChanger","defaultProps","AntdIcon","Object","assign","icon","displayName","AccountPage","selectedRowKeys","setSelectedRowKeys","formRef","searchFormRef","tableRef","location","useLocation","pathname","state","resData","setResData","validateForm","modalType","formItem","label","field","value","placeholder","disabled","rules","required","message","options","undefined","treeDefaultExpandAll","asyncOptions","curValue","fields","a","getOrganizationTtree","mapTree","getRolePage","roleName","roleId","asyncValue","toString","split","status","handleDetail","getUser","userId","Modal","info","content","dynamicValidateForm","onOk","close","okText","permission","effect","deleteUser","confirm","validateFields","values","console","log","updateUser","Message","success","error","catch","handleClick","refresh","className","layout","labelCol","span","wrapperCol","grid","rowGutter","colSpan","showBtn","ghost","saveUser","err","danger","deleteUsers","getUserPage","keys"],"mappings":"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","file":"static/js/23.0450d012.chunk.js","sourcesContent":["import React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react'\r\nimport {TableColumn} from \"./tableColumn.d\"\r\nimport { Table, Space, Popconfirm } from 'antd'\r\n// import {debounce} from '@/utils/index'\r\n\r\ninterface Columns {\r\n    actions?: any;\r\n    [key: string]: any;\r\n}\r\n\r\n// 分页查询参数\r\ninterface PagePrams {\r\n    current?: string | number // 当前页数\r\n    size?: string | number // 每页条数\r\n    [key: string]: any\r\n}\r\n\r\nexport interface BasicTableProps {\r\n    columns?: TableColumn\r\n    rowSelection?: any\r\n    rowKey?: any\r\n    queryParams?: object\r\n    pageOption?: any\r\n    searchParam?: any\r\n    getListFunc?: (val: any) => Promise<unknown> \r\n    refreshTable?: boolean\r\n    style?: React.CSSProperties\r\n    type?: any\r\n    onExpand?:(expanded:any, record:any) => void\r\n    callback?:(val:any) => void\r\n}\r\n\r\nexport interface MenuItemProps {\r\n    index?: string;\r\n    disabled?: boolean\r\n    className?: string\r\n    style?: React.CSSProperties\r\n}\r\n\r\nconst BasicTable = forwardRef<any, BasicTableProps>((props, ref) => {\r\n    const {columns, rowKey, rowSelection, queryParams, pageOption, searchParam, getListFunc, type, onExpand, callback} = props\r\n    const [data, setData] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    // const [pageOptions, setPageOptions] = useState(pageOption)\r\n    const flag = columns.find((item:any) => (item.dataIndex || item.key) === 'action')\r\n    const actions = flag ? flag.actions : []\r\n    const _isCancelled = React.useRef(false)\r\n    // const [searchParam, setSearchParam] = useState({}) // 存储搜索记录，销毁时清除\r\n\r\n    // 获取表格数据\r\n    const refreshTableData =  (param?:any) => {\r\n        setLoading(true)\r\n        const params =  {\r\n            current:pageOption.current, \r\n            size:pageOption.pageSize, \r\n            ...queryParams, \r\n            ...searchParam,\r\n            ...param\r\n        }\r\n        getListFunc &&  getListFunc(params).then((result:any)=>{\r\n            if(result.code === 200){\r\n                if (!_isCancelled.current) { \r\n                const {records, current, size, total} = result.result\r\n                    // setPageOptions(Object.assign(pageOption, {current, pageSize:size, total}))\r\n                    callback && callback({\r\n                        searchParam: params,\r\n                        pageOption: {current, pageSize:size, total}\r\n                    })\r\n                    // 因为没有传回children字段，要自行添加，table tree 需要children\r\n                    if(type && type ==='table-tree'){\r\n                        records.forEach((item:any) => {\r\n                            item['children'] = []\r\n                        })\r\n                    }\r\n                    setData(records)\r\n                }\r\n            }\r\n        }).finally(() => {if(!_isCancelled.current){setLoading(false)} })\r\n        \r\n    }\r\n\r\n    // 操作事件\r\n    const actionEvent = (record:any, func:any) => func({record, props}, refreshTableData)\r\n\r\n    const genColumn = (column:any)=>{\r\n        let arr=[]\r\n        arr.push(...column.filter((item:any) => {\r\n           return item.dataIndex !== 'action'\r\n        }))\r\n        if(actions.length>0){\r\n            arr.push({\r\n                title: '操作',\r\n                key: 'action',\r\n                render: (text:any, record:any) => (\r\n                    <Space size=\"middle\">\r\n                    { actions.map((action:any, index:number) => (\r\n                         [ action.type==='popconfirm'? ( \r\n                            <Popconfirm key={index} title=\"您确定要删除吗？\" onConfirm={()=>actionEvent(record, action.func)}\r\n                    ><a>删除</a></Popconfirm>):'' ,\r\n                        action.type ===  'text'? (<a key={index} onClick={()=>actionEvent(record, action.func)}>{action.text}</a>):'']\r\n                    ))}\r\n                        \r\n                {/* //     <a>编辑</a>\r\n                //     <a>关联权限</a> */}\r\n                </Space>\r\n                ),\r\n            })\r\n        }\r\n        return arr\r\n    }\r\n\r\n    useEffect(()=>{\r\n        refreshTableData()\r\n        return () => {\r\n            // setSearchParam({})\r\n            _isCancelled.current = true\r\n        }\r\n    }, [])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        refreshTable: (val:any) => {\r\n            // setSearchParam(val)\r\n            refreshTableData(val)\r\n        }\r\n    }))\r\n\r\n    // 分页改变\r\n    const paginationChange = (page:number, pageSize:number) => {\r\n        let params = {\r\n            size:pageSize?pageSize:pageOption.pageSize,\r\n            current: page\r\n        }\r\n        // setPageOptions({current: page, size:pageSize?pageSize:pageOption.pageSize })\r\n        callback && callback({\r\n            searchParam: searchParam,\r\n            pageOption: params\r\n        })\r\n        refreshTableData(params)\r\n    }\r\n\r\n\r\n    return (\r\n        <Table rowKey={rowKey}\r\n            rowSelection={rowSelection} \r\n            columns={genColumn(columns)} \r\n            dataSource={data} \r\n            loading={loading}\r\n            pagination={{...pageOption, \r\n                onChange:paginationChange, \r\n                pageSizeOptions: ['5', '10', '20', '50'],\r\n                showSizeChanger: true,\r\n            }}\r\n            onExpand={onExpand}\r\n        >\r\n            {/* {\r\n                columns.map((item:any) => (\r\n                <Column title={item.title} dataIndex={item.dataIndex} key={item.dataIndex}></Column>   \r\n                //   {item.dataIndex!=='action'?\r\n                //     <Column title={item.title} dataIndex={item.dataIndex} key={item.dataIndex} />\r\n                //     :''}\r\n                ))\r\n            } */}\r\n            {/* <Column title=\"roleName\" dataIndex=\"roleName\" key=\"roleName\" />\r\n        \r\n                actions.map((action:any, index:number) => (\r\n                    <div key={index}>88</div>\r\n                    {action.type == 'text'? <button>dddd</button>:''}  \r\n\r\n                ))\r\n            }\r\n            \r\n        <Column title=\"First Name\" dataIndex=\"firstName\" key=\"firstName\" />\r\n        \r\n            <Column\r\n                title=\"Action\"\r\n                key=\"action\"\r\n                render={(text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a>Invite {record.lastName}</a>\r\n                        <a>Delete</a>\r\n                    </Space>\r\n                )}\r\n                />  */}\r\n        </Table>\r\n    )\r\n})\r\n\r\nBasicTable.defaultProps = {\r\n    pageOption:{\r\n        current:1, pageSize:10\r\n    },\r\n    refreshTable:false\r\n}\r\n\r\nexport default BasicTable\r\n","export { default as BasicTable } from './BasicTable'\r\nexport * from './tableColumn.d'","// This icon file is generated automatically.\nvar DeleteOutlined = {\n  \"icon\": {\n    \"tag\": \"svg\",\n    \"attrs\": {\n      \"viewBox\": \"64 64 896 896\",\n      \"focusable\": \"false\"\n    },\n    \"children\": [{\n      \"tag\": \"path\",\n      \"attrs\": {\n        \"d\": \"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\"\n      }\n    }]\n  },\n  \"name\": \"delete\",\n  \"theme\": \"outlined\"\n};\nexport default DeleteOutlined;","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DeleteOutlinedSvg from \"@ant-design/icons-svg/es/asn/DeleteOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DeleteOutlined = function DeleteOutlined(props, ref) {\n  return (\n    /*#__PURE__*/\n    React.createElement(AntdIcon, Object.assign({}, props, {\n      ref: ref,\n      icon: DeleteOutlinedSvg\n    }))\n  );\n};\n\nDeleteOutlined.displayName = 'DeleteOutlined';\nexport default\n/*#__PURE__*/\nReact.forwardRef(DeleteOutlined);","\r\nimport React, { FC, useState, useRef, useEffect} from 'react'\r\nimport {BasicTable} from '@/components/table'\r\nimport {deleteUser, deleteUsers, getUser, getUserPage, updateUser, saveUser, getOrganizationTtree, getRolePage} from '@/api/system'\r\nimport { Modal, message as Message, Button } from 'antd'\r\nimport { PlusOutlined, DeleteOutlined} from '@ant-design/icons'\r\nimport { SchemaForm } from '@/components/form'\r\nimport { FormInstance } from 'antd/lib/form'\r\nimport {mapTree} from '@/utils/index'\r\nimport { CustSchemaForm } from '@/components/form'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst AccountPage: FC = () => {\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([])\r\n    const formRef = useRef<FormInstance>(null)\r\n    const searchFormRef = useRef<FormInstance>(null)\r\n    const tableRef = useRef(null)\r\n    const location = useLocation()\r\n    const {pathname, state} = location\r\n    const [resData, setResData] = useState({\r\n        pageOption: {},\r\n        searchParam: {}\r\n    })\r\n    \r\n    const searchSchema = {\r\n        layout : {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 18 },\r\n        },\r\n        grid: {\r\n            rowGutter: 10,\r\n            colSpan: 5\r\n        },\r\n        formItem: [\r\n            {\r\n                type: \"input\",\r\n                label: \"账号\",\r\n                field: \"account\",\r\n                value: \"\",\r\n                props: {\r\n                    placeholder: \"请输入账号或手机号\"\r\n                },\r\n            },\r\n            {\r\n                type: \"input\",\r\n                label: \"用户名\",\r\n                field: \"name\",\r\n                value: \"\",\r\n                props: {\r\n                    placeholder: \"请输入用户姓名\"\r\n                },\r\n            },\r\n            {\r\n                type: \"select\",\r\n                label: \"状态\",\r\n                field: \"status\",\r\n                value: \"\",\r\n                props: {\r\n                    placeholder: \"请选择状态\"\r\n                },\r\n                options:[\r\n                    {label:'可用', value:'y', key:'y'},\r\n                    {label:'不可用', value:'n', key:'n'}\r\n                ]\r\n            }\r\n        ]\r\n    }     \r\n\r\n    const validateForm=(modalType:string)=>{\r\n        return {\r\n            formItem: [\r\n                {\r\n                    type: \"input\",\r\n                    label: \"用户名\",\r\n                    field: \"account\",\r\n                    value: '',\r\n                    props: {\r\n                        placeholder: \"请输入用户名\",\r\n                        disabled: (modalType === 'edit'||modalType === 'detail') ? true : false\r\n\r\n                    },\r\n                    rules: [\r\n                        {\r\n                            required: (modalType === 'edit'||modalType === 'detail') ? false : true,\r\n                            message: \"用户名不能为空\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"input\",\r\n                    label: \"密码\",\r\n                    field: \"password\",\r\n                    value: \"\",\r\n                    props: {\r\n                        type: 'password',\r\n                        placeholder: \"请输入密码\",\r\n                        disabled:  modalType === 'add' ? false : true,\r\n\r\n                    },\r\n                    rules: [\r\n                        {\r\n                            required:  modalType === 'detail' ? false : true,\r\n                            message: \"密码不能为空\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"input\",\r\n                    label: \"姓名\",\r\n                    field: \"name\",\r\n                    value: '',\r\n                    props: {\r\n                        placeholder: \"请输入姓名\"\r\n                    },\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: \"姓名不能为空\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"radio\",\r\n                    label: \"性别\",\r\n                    field: \"sex\",\r\n                    value: '',\r\n                    options:[\r\n                        {value:'M', label:'男'},\r\n                        {value:'F', label:'女'}\r\n                    ],\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: \"性别不能为空\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"input\",\r\n                    label: \"手机号\",\r\n                    field: \"phone\",\r\n                    value: '',\r\n                    props: {\r\n                        placeholder: \"请输入手机号\"\r\n                    },\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: \"手机号不能为空\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"input\",\r\n                    label: \"邮箱\",\r\n                    field: \"email\",\r\n                    value: '',\r\n                    props: {\r\n                        placeholder: \"请输入邮箱\"\r\n                    },\r\n                    rules: [\r\n                        {\r\n                            required: true,\r\n                            message: \"邮箱不能为空\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tree-select\",\r\n                    label: \"单位\",\r\n                    field: \"organizationId\",\r\n                    value: undefined,\r\n                    loading: true,\r\n                    props: {\r\n                        placeholder: \"请选择单位\",\r\n                        treeDefaultExpandAll: false,\r\n                    },\r\n                    asyncOptions: async (curValue:any, fields:any) => {\r\n                        const {result}:any = await getOrganizationTtree() \r\n                        let arr = mapTree(result[0])\r\n                        return arr? [arr]:[]\r\n                    },\r\n                },\r\n                {\r\n                    type: \"multiple-select\",\r\n                    label: \"角色\",\r\n                    field: \"roleId\",\r\n                    value: undefined,\r\n                    loading: true,\r\n                    props: {\r\n                        placeholder: \"请选择角色\",\r\n                    },\r\n                    asyncOptions: async () => {\r\n                        // 获取角色列表\r\n                        const {result}:any = await getRolePage({\"current\": 1, \"size\": 50})\r\n                        return result.records.map((item:any) => ({\r\n                            label: item.roleName,\r\n                            value: item.roleId,\r\n                            key: item.roleId\r\n                        }))\r\n                    },\r\n                    asyncValue: async (curValue:any, fields:any) => {\r\n                        const {roleId} = fields\r\n                        return roleId ? roleId.toString().split(',') : []\r\n                    }\r\n                },\r\n                {\r\n                    type: \"switch\",\r\n                    label: \"状态\",\r\n                    field: \"status\",\r\n                    value: undefined,\r\n                    props: {\r\n                        // placeholder: \"请输入手机号\",\r\n                        // checkedChildren: \"y\",\r\n                        // unCheckedChildren: \"n\"\r\n                    },\r\n                    asyncValue: async (curValue:any, fields:any) => {\r\n                        return fields.status === 'n'? false: true\r\n                    }\r\n                },\r\n            ],\r\n            modalType\r\n        }\r\n    }\r\n\r\n    const handleDetail=async(record?:any)=>{\r\n        let fields={}\r\n        const {code, result}:any = await getUser(record.userId)\r\n        if(code===200){\r\n            fields = result\r\n        }\r\n        Modal.info({\r\n            title: '',\r\n            icon: '',\r\n            content: <SchemaForm ref={formRef} fields={fields} dynamicValidateForm={validateForm('detail')} />,\r\n            // okButtonProps:{ disabled: true },\r\n            onOk: (close) => {\r\n                close()\r\n            },\r\n            okText:\"关闭\",\r\n        })\r\n    }\r\n\r\n    const columns=[ \r\n            {\r\n                title: '用户名',\r\n                dataIndex: 'account',\r\n                key: 'account',\r\n                render: (text:any, ...[record, index]:any) => {\r\n                    return  <a type=\"text\" onClick={()=>handleDetail(record)}>\r\n                    {text}\r\n                  </a>\r\n                }\r\n            },\r\n            {\r\n                title: '姓名',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n            },\r\n            {\r\n                title: '性别',\r\n                dataIndex: 'sex',\r\n                key: 'sex',\r\n                render: (text:any) => text === 'M' ? '男':'女'\r\n            },\r\n            {\r\n                title: '手机号',\r\n                dataIndex: 'phone',\r\n                key: 'phone',\r\n            },\r\n            {\r\n                title: '邮箱',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n            },\r\n            {\r\n                title:'单位',\r\n                dataIndex: 'organizationName',\r\n                key: 'organizationName',\r\n            },\r\n            {\r\n                title: '状态',\r\n                dataIndex: 'status',\r\n                key: 'status',\r\n                render: (text:any) => text === 'y' ? '可用':'不可用'\r\n            },\r\n            {\r\n                title: '操作',\r\n                dataIndex: 'action',\r\n                actions: [\r\n                    {\r\n                        type: 'popconfirm', // 控制类型，默认为a,可选： select | button | text\r\n                        key: 'fileid', // 删除的依据，如果需要根据多个字段删除，则字段之间以英文逗号分隔开，例如： id, name\r\n                        text: '删除',\r\n                        permission: { // 权限\r\n                            action: 'delete',\r\n                            effect: 'disabled'\r\n                        },\r\n                        props: {\r\n                            type: 'danger'\r\n                        },\r\n                        func: async ({record}:any, callback:any) => {\r\n                            await deleteUser({userId:record.userId})\r\n                            callback()\r\n                        },\r\n                    },\r\n                    {\r\n                        type: 'text', // 控制类型，默认为a,可选： select | button | text\r\n                        key: 'fileid', // 删除的依据，如果需要根据多个字段删除，则字段之间以英文逗号分隔开，例如： id, name\r\n                        text: '编辑',\r\n                        props: {\r\n                            type: 'warning'\r\n                        },\r\n                        func: async({record}:any, callback:any) => {\r\n                            let fields={}\r\n                            const {code, result}:any = await getUser(record.userId)\r\n                            if(code===200){\r\n                                fields = result\r\n                            }\r\n                            // setValidateForm({...validateForm})\r\n                            Modal.confirm({\r\n                                title: '编辑账号',\r\n                                icon: '',\r\n                                content: <SchemaForm ref={formRef} fields={fields} dynamicValidateForm={validateForm('edit')} />,\r\n                                onOk: (close) => {\r\n                                    // return new Promise((resolve, reject) => {\r\n                                        formRef.current!.validateFields().then(async(values:any)=>{\r\n                                            console.log('values.status', values.status)\r\n                                            const params={\r\n                                                ...record,\r\n                                                ...values,\r\n                                                roleId: values.roleId.toString(),\r\n                                                status: values.status ? 'y' : 'n'\r\n                                            }\r\n                                            const {code, message}:any = await updateUser(params)\r\n                                            if(code === 200){\r\n                                                 Message.success(`${message}`,1.5,()=>close());\r\n                                                // resolve(null as any)\r\n                                                // setRefresh(!refreshTable)\r\n                                                (tableRef as any).current.refreshTable()\r\n                                            }else{\r\n                                                Message.error(`${message}`)\r\n                                                // reject('出错!')\r\n                                            }\r\n                                        }).catch(() => console.log('出错!'))\r\n                                    // }).catch(()=>{})\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                ]\r\n            }\r\n        ]\r\n\r\n    const onSelectChange = (keys:any) => {\r\n        setSelectedRowKeys(keys)\r\n    }\r\n\r\n    const deleteItems=()=>{\r\n        Modal.confirm({\r\n            title: '提示',\r\n            icon: '',\r\n            content: '您确定要删除所有选中吗？',\r\n            onOk: async () => {\r\n                await deleteUsers(selectedRowKeys.toString());\r\n                (tableRef as any).current.refreshTable()\r\n                setSelectedRowKeys([])\r\n            }\r\n        })\r\n    }\r\n\r\n    const addItem =()=>{\r\n        Modal.confirm({\r\n            title: '新增用户',\r\n            icon: '',\r\n            content: <SchemaForm ref={formRef} dynamicValidateForm={validateForm('add')} />,\r\n            onOk: (close) => { \r\n                formRef.current!.validateFields().then(async(values:any)=>{\r\n                    const params={\r\n                        ...values,\r\n                        roleId: values.roleId?values.roleId.toString():null,\r\n                        status: values.status?'y':'n'\r\n                    }\r\n                    const {code, message, result}:any = await saveUser(params)\r\n                    if(code === 200){\r\n                        Message.success(`${message}`,1.5,()=>close());\r\n                        (tableRef as any).current.refreshTable()\r\n                    }else{\r\n                        Message.error(`${message},${result}`)\r\n                    }\r\n                }).catch((err:any) => console.log(err))\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleClick=(val:any)=> {\r\n        setResData({\r\n            pageOption: resData.pageOption,\r\n            searchParam:val\r\n        });\r\n        (tableRef as any).current.refreshTable(val)\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(state && (state as any).refresh && pathname === '/system/account'){\r\n            console.log('resData', resData)\r\n            handleClick(resData.searchParam)\r\n        }\r\n    }, [state])\r\n\r\n    const callback=(val:any)=> setResData(val)\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <CustSchemaForm ref={searchFormRef} dynamicValidateForm={searchSchema} callback={handleClick} showBtn >\r\n                <Button type=\"primary\" ghost icon={<PlusOutlined />}  onClick={addItem}> 添加 </Button>\r\n                <Button danger icon={<DeleteOutlined />}  onClick={deleteItems}> 删除 </Button>\r\n            </CustSchemaForm>\r\n            <BasicTable \r\n                ref={tableRef}\r\n                columns={columns} \r\n                getListFunc={getUserPage} \r\n                rowKey=\"userId\"  \r\n                rowSelection={{\r\n                    selectedRowKeys,\r\n                    onChange: onSelectChange,\r\n                }} \r\n                pageOption={resData.pageOption}\r\n                searchParam={resData.searchParam}\r\n                callback={callback}\r\n            />\r\n  \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AccountPage"],"sourceRoot":""}