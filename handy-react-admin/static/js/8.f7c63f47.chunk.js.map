{"version":3,"sources":["components/table/BasicTable.tsx","components/table/index.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","utils/dateUtil.ts","pages/system/loginLog/index.tsx"],"names":["BasicTable","forwardRef","props","ref","columns","rowKey","rowSelection","queryParams","pageOption","searchParam","getListFunc","type","onExpand","callback","useState","data","setData","loading","setLoading","flag","find","item","dataIndex","key","actions","_isCancelled","React","useRef","refreshTableData","param","params","current","size","pageSize","then","result","code","records","total","forEach","finally","actionEvent","record","func","useEffect","useImperativeHandle","refreshTable","val","column","arr","push","filter","length","title","render","text","map","action","index","onConfirm","onClick","genColumn","dataSource","pagination","onChange","page","pageSizeOptions","showSizeChanger","defaultProps","_objectWithoutProperties","source","excluded","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","DATE_TIME_FORMAT","DATE_FORMAT","formatToDateTime","date","moment","format","formatToDate","LoginLogPage","formRef","tableRef","location","useLocation","pathname","state","resData","setResData","handleClick","timeRange","startDate","endDate","refresh","className","dynamicValidateForm","layout","labelCol","span","wrapperCol","grid","rowGutter","colSpan","formItem","label","field","value","placeholder","tailLayout","showBtn","ellipsis","getLogPage"],"mappings":"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","file":"static/js/8.f7c63f47.chunk.js","sourcesContent":["import React, { useEffect, useState, forwardRef, useImperativeHandle } from 'react'\r\nimport {TableColumn} from \"./tableColumn.d\"\r\nimport { Table, Space, Popconfirm } from 'antd'\r\n// import {debounce} from '@/utils/index'\r\n\r\ninterface Columns {\r\n    actions?: any;\r\n    [key: string]: any;\r\n}\r\n\r\n// 分页查询参数\r\ninterface PagePrams {\r\n    current?: string | number // 当前页数\r\n    size?: string | number // 每页条数\r\n    [key: string]: any\r\n}\r\n\r\nexport interface BasicTableProps {\r\n    columns?: TableColumn\r\n    rowSelection?: any\r\n    rowKey?: any\r\n    queryParams?: object\r\n    pageOption?: any\r\n    searchParam?: any\r\n    getListFunc?: (val: any) => Promise<unknown> \r\n    refreshTable?: boolean\r\n    style?: React.CSSProperties\r\n    type?: any\r\n    onExpand?:(expanded:any, record:any) => void\r\n    callback?:(val:any) => void\r\n}\r\n\r\nexport interface MenuItemProps {\r\n    index?: string;\r\n    disabled?: boolean\r\n    className?: string\r\n    style?: React.CSSProperties\r\n}\r\n\r\nconst BasicTable = forwardRef<any, BasicTableProps>((props, ref) => {\r\n    const {columns, rowKey, rowSelection, queryParams, pageOption, searchParam, getListFunc, type, onExpand, callback} = props\r\n    const [data, setData] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    // const [pageOptions, setPageOptions] = useState(pageOption)\r\n    const flag = columns.find((item:any) => (item.dataIndex || item.key) === 'action')\r\n    const actions = flag ? flag.actions : []\r\n    const _isCancelled = React.useRef(false)\r\n    // const [searchParam, setSearchParam] = useState({}) // 存储搜索记录，销毁时清除\r\n\r\n    // 获取表格数据\r\n    const refreshTableData =  (param?:any) => {\r\n        setLoading(true)\r\n        const params =  {\r\n            current:pageOption.current, \r\n            size:pageOption.pageSize, \r\n            ...queryParams, \r\n            ...searchParam,\r\n            ...param\r\n        }\r\n        getListFunc &&  getListFunc(params).then((result:any)=>{\r\n            if(result.code === 200){\r\n                if (!_isCancelled.current) { \r\n                const {records, current, size, total} = result.result\r\n                    // setPageOptions(Object.assign(pageOption, {current, pageSize:size, total}))\r\n                    callback && callback({\r\n                        searchParam: params,\r\n                        pageOption: {current, pageSize:size, total}\r\n                    })\r\n                    // 因为没有传回children字段，要自行添加，table tree 需要children\r\n                    if(type && type ==='table-tree'){\r\n                        records.forEach((item:any) => {\r\n                            item['children'] = []\r\n                        })\r\n                    }\r\n                    setData(records)\r\n                }\r\n            }\r\n        }).finally(() => {if(!_isCancelled.current){setLoading(false)} })\r\n        \r\n    }\r\n\r\n    // 操作事件\r\n    const actionEvent = (record:any, func:any) => func({record, props}, refreshTableData)\r\n\r\n    const genColumn = (column:any)=>{\r\n        let arr=[]\r\n        arr.push(...column.filter((item:any) => {\r\n           return item.dataIndex !== 'action'\r\n        }))\r\n        if(actions.length>0){\r\n            arr.push({\r\n                title: '操作',\r\n                key: 'action',\r\n                render: (text:any, record:any) => (\r\n                    <Space size=\"middle\">\r\n                    { actions.map((action:any, index:number) => (\r\n                         [ action.type==='popconfirm'? ( \r\n                            <Popconfirm key={index} title=\"您确定要删除吗？\" onConfirm={()=>actionEvent(record, action.func)}\r\n                    ><a>删除</a></Popconfirm>):'' ,\r\n                        action.type ===  'text'? (<a key={index} onClick={()=>actionEvent(record, action.func)}>{action.text}</a>):'']\r\n                    ))}\r\n                        \r\n                {/* //     <a>编辑</a>\r\n                //     <a>关联权限</a> */}\r\n                </Space>\r\n                ),\r\n            })\r\n        }\r\n        return arr\r\n    }\r\n\r\n    useEffect(()=>{\r\n        refreshTableData()\r\n        return () => {\r\n            // setSearchParam({})\r\n            _isCancelled.current = true\r\n        }\r\n    }, [])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        refreshTable: (val:any) => {\r\n            // setSearchParam(val)\r\n            refreshTableData(val)\r\n        }\r\n    }))\r\n\r\n    // 分页改变\r\n    const paginationChange = (page:number, pageSize:number) => {\r\n        let params = {\r\n            size:pageSize?pageSize:pageOption.pageSize,\r\n            current: page\r\n        }\r\n        // setPageOptions({current: page, size:pageSize?pageSize:pageOption.pageSize })\r\n        callback && callback({\r\n            searchParam: searchParam,\r\n            pageOption: params\r\n        })\r\n        refreshTableData(params)\r\n    }\r\n\r\n\r\n    return (\r\n        <Table rowKey={rowKey}\r\n            rowSelection={rowSelection} \r\n            columns={genColumn(columns)} \r\n            dataSource={data} \r\n            loading={loading}\r\n            pagination={{...pageOption, \r\n                onChange:paginationChange, \r\n                pageSizeOptions: ['5', '10', '20', '50'],\r\n                showSizeChanger: true,\r\n            }}\r\n            onExpand={onExpand}\r\n        >\r\n            {/* {\r\n                columns.map((item:any) => (\r\n                <Column title={item.title} dataIndex={item.dataIndex} key={item.dataIndex}></Column>   \r\n                //   {item.dataIndex!=='action'?\r\n                //     <Column title={item.title} dataIndex={item.dataIndex} key={item.dataIndex} />\r\n                //     :''}\r\n                ))\r\n            } */}\r\n            {/* <Column title=\"roleName\" dataIndex=\"roleName\" key=\"roleName\" />\r\n        \r\n                actions.map((action:any, index:number) => (\r\n                    <div key={index}>88</div>\r\n                    {action.type == 'text'? <button>dddd</button>:''}  \r\n\r\n                ))\r\n            }\r\n            \r\n        <Column title=\"First Name\" dataIndex=\"firstName\" key=\"firstName\" />\r\n        \r\n            <Column\r\n                title=\"Action\"\r\n                key=\"action\"\r\n                render={(text, record) => (\r\n                    <Space size=\"middle\">\r\n                        <a>Invite {record.lastName}</a>\r\n                        <a>Delete</a>\r\n                    </Space>\r\n                )}\r\n                />  */}\r\n        </Table>\r\n    )\r\n})\r\n\r\nBasicTable.defaultProps = {\r\n    pageOption:{\r\n        current:1, pageSize:10\r\n    },\r\n    refreshTable:false\r\n}\r\n\r\nexport default BasicTable\r\n","export { default as BasicTable } from './BasicTable'\r\nexport * from './tableColumn.d'","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import { isObject, isString } from './is'\nimport moment from 'moment';\n\nconst DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nconst DATE_FORMAT = 'YYYY-MM-DD';\n\nexport function formatToDateTime(date: moment.MomentInput = null): string {\n  return moment(date).format(DATE_TIME_FORMAT);\n}\n\nexport function formatToDate(date: moment.MomentInput = null): string {\n  return moment(date).format(DATE_FORMAT);\n}\n\nexport const formatAgo = (str: string | number) => {\n  if (!str) return '';\n  const date = new Date(Number(str));\n  const time = new Date().getTime() - date.getTime(); // 现在的时间-传入的时间 = 相差的时间（单位 = 毫秒）\n  if (time < 0) {\n    return '';\n  } else if (time / 1000 < 30) {\n    return '刚刚';\n  } else if (time / 1000 < 60) {\n    return parseInt(String(time / 1000)) + '秒前';\n  } else if (time / 60000 < 60) {\n    return parseInt(String(time / 60000)) + '分钟前';\n  } else if (time / 3600000 < 24) {\n    return parseInt(String(time / 3600000)) + '小时前';\n  } else if (time / 86400000 < 31) {\n    return parseInt(String(time / 86400000)) + '天前';\n  } else if (time / 2592000000 < 12) {\n    return parseInt(String(time / 2592000000)) + '月前';\n  } else {\n    return parseInt(String(time / 31536000000)) + '年前';\n  }\n};\n/**\n * @description: 格式化请求参数时间\n */\nexport function formatRequestDate(params: any) {\n  for (const key in params) {\n    if (params[key] && params[key]._isAMomentObject) {\n      params[key] = params[key].format(DATE_TIME_FORMAT);\n    }\n    if (isString(key)) {\n      const value = params[key];\n      if (value) {\n        try {\n          params[key] = isString(value) ? value.trim() : value;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    }\n    if (isObject(params[key])) {\n      formatRequestDate(params[key]);\n    }\n  }\n}\n\nexport const dateUtil = moment;\n","\r\nimport React, { FC, useEffect, useRef, useState} from 'react'\r\nimport { BasicTable } from '@/components/table'\r\nimport { getLogPage } from '@/api/system'\r\nimport { FormInstance } from 'antd/lib/form'\r\nimport { CustSchemaForm } from '@/components/form'\r\nimport {formatToDate} from '@/utils/dateUtil'\r\nimport {useLocation} from 'react-router-dom'\r\n\r\nconst LoginLogPage: FC = () => {\r\n    const formRef = useRef<FormInstance>(null)\r\n    const tableRef = useRef(null)\r\n    const location = useLocation()\r\n    const {pathname, state} = location\r\n    const [resData, setResData] = useState({\r\n        pageOption: {},\r\n        searchParam: {}\r\n    })\r\n\r\n    const searchSchema = {\r\n        layout : {\r\n            labelCol: { span: 8 },\r\n            wrapperCol: { span: 16 },\r\n        },\r\n        grid: {\r\n            rowGutter: 10,\r\n            colSpan: 5\r\n        },\r\n        formItem: [\r\n            {\r\n                type: \"input\",\r\n                label: \"登录名称\",\r\n                field: \"userName\",\r\n                value: \"\",\r\n                props: {\r\n                    placeholder: \"请输入登陆人姓名\"\r\n                },\r\n            },\r\n            {\r\n                type: \"input\",\r\n                label: \"登录账号\",\r\n                field: \"userAccount\",\r\n                value: \"\",\r\n                props: {\r\n                    placeholder: \"请输入登录账号\"\r\n                },\r\n            },\r\n            {\r\n                type: \"range-pcker\",\r\n                label: \"时间\",\r\n                field: \"timeRange\",\r\n                value: \"\",\r\n                grid: {\r\n                    rowGutter: 0,\r\n                    colSpan: 7\r\n                },\r\n                tailLayout:{\r\n                    labelCol: { span: 3 },\r\n                    wrapperCol: { span: 21 },\r\n                }, \r\n                // props: {\r\n                //     placeholder: \"请输入登录账号\"\r\n                // },\r\n            }\r\n        ]\r\n    }\r\n\r\n    const columns=[ \r\n        {\r\n            title: '登录名称',\r\n            dataIndex: 'userName',\r\n            // slots: {\r\n            //     customRender: 'moduleName'\r\n            // }\r\n        },\r\n        {\r\n            title: '登录账号',\r\n            dataIndex: 'userAccount',\r\n        },\r\n        {\r\n            title: '登录地址',\r\n            dataIndex: 'ipAddress',\r\n        },\r\n        {\r\n            title: '状态',\r\n            dataIndex: 'succeed',\r\n        },\r\n        {\r\n            title: '操作时间',\r\n            dataIndex: 'createTime',\r\n        },\r\n        {\r\n            title: '浏览器版本',\r\n            dataIndex: 'browser',\r\n            ellipsis: true,\r\n        }\r\n    ]\r\n\r\n    const handleClick=(val:any)=>{\r\n        const {timeRange, ...rest} = val\r\n        const params={\r\n            ...rest,\r\n            startDate: timeRange && formatToDate(timeRange[0]),\r\n            endDate: timeRange && formatToDate(timeRange[1])\r\n        };\r\n        setResData({\r\n            pageOption: resData.pageOption,\r\n            searchParam: params\r\n        });\r\n        (tableRef as any).current.refreshTable(params)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(state && (state as any).refresh && pathname === '/system/loginLog'){\r\n            handleClick(resData.searchParam)\r\n        }\r\n    }, [state])\r\n\r\n    const callback=(val:any)=> setResData(val)\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <CustSchemaForm ref={formRef} dynamicValidateForm={searchSchema} callback={handleClick} showBtn/>\r\n            <BasicTable \r\n                ref={tableRef}\r\n                columns={columns} \r\n                getListFunc={getLogPage} \r\n                rowKey=\"loginLogId\"  \r\n                pageOption={resData.pageOption}\r\n                searchParam={resData.searchParam}\r\n                callback={callback}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoginLogPage"],"sourceRoot":""}